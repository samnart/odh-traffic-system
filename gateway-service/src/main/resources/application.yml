spring:
  application:
    name: gateway-service
  cloud:
    gateway:
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
        - name: CircuitBreaker
          args:
            name: defaultCircuitBreaker
            fallbackUri: forward:/fallback
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      routes:
        - id: traffic-service
          uri: lb://traffic-service
          predicates:
            - Path=/api/traffic/**
          filters:
            - RewritePath=/api/traffic/(?<segment>.*), /${segment}
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/api/users/**
          filters:
            - RewritePath=/api/users/(?<segment>.*), /${segment}
      httpclient:
        connect-timeout: 2000
        response-timeout: 5s

    loadbalancer:
      ribbon:
        enabled: false
  
  # Redis configuration for rate limiting
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
  
  # Distributed tracing configuration
  sleuth:
    sampler:
      probability: 1.0
  zipkin:
    base-url: ${ZIPKIN_URL:http://localhost:9411}
    enabled: ${ZIPKIN_ENABLED:true}

# Security configuration
security:
  api-key: ${API_KEY:change-me-in-production}
  api-key-header: X-API-Key
  public-paths: /actuator/health,/actuator/info,/v3/api-docs

# Rate limiter configuration (fallback if Redis is unavailable)
rate-limiter:
  capacity: 100
  refill-tokens: 10
  refill-duration: 1

# CORS configuration
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:*}
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: "*"
  max-age: 3600

# Server configuration
server:
  port: ${SERVER_PORT:8080}

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  prometheus:
    metrics:
      export:
        enabled: true  

# Logging configuration
logging:
  level:
    root: ${LOG_LEVEL:INFO}
    org.springframework.cloud.gateway: ${GATEWAY_LOG_LEVEL:INFO}
    com.samnart.gateway_service: ${APP_LOG_LEVEL:DEBUG}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Swagger aggregation (for web UIs like Swagger UI frontend)
springdoc:
  swagger-ui:
    urls:
      - name: traffic-service
        url: /api/traffic/v3/api-docs
      - name: user-service
        url: /api/users/v3/api-docs
  api-docs:
    enabled: true
  default-produces-media-type: application/json